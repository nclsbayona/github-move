apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "subway.fullname" . }}
  labels:
    {{- include "subway.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
      maxSurge: {{ .Values.maxSurge }}
  selector:
    matchLabels:
      component: web
      {{- include "subway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        component: web
        {{- include "subway.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "subway.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - web
          env:
            - name: DOPPLER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: subway-{{ .Release.Namespace }}-doppler-token
                  key: DOPPLER_TOKEN
            - name: SUBWAY_VERSION
              value: {{ .Values.image.tag }}
          ports:
            - name: http
              containerPort: {{ .Values.httpPort }}
              protocol: TCP
            - name: socket
              containerPort: {{ .Values.socketPort }}
              protocol: TCP
          # Let the app start up, check every 6 seconds, 10 times
          # as soon as this comes back healthy k8s will move
          # to readiness and liveness probes. It has a minute to start.
          startupProbe:
            httpGet:
              path: /healthz
              port: http
            failureThreshold: 10
            periodSeconds: 6
          # If the app fails a readiness check 3 times in a row
          # k8s will stop sending traffic, but won't restart the
          # pod, to give it a chance to recover.
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            failureThreshold: 3
          # If it fails this 3 more times than readiness, the pod
          # will get restarted. we're essentially giving it 15
          # seconds to recover before getting restarted.
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 60
            periodSeconds: 5
            failureThreshold: 6
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp
          emptyDir:
            medium: "Memory"
